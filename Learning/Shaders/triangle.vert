/*
 * УЧЕБНЫЙ КОММЕНТАРИЙ: Вершинный шейдер в Vulkan (GLSL)
 *
 * Вершинный шейдер - это первый программируемый этап графического конвейера.
 * Он вызывается для каждой вершины и выполняет следующие задачи:
 * 1. Получает атрибуты вершины (позиция, цвет, текстурные координаты и т.д.)
 * 2. Выполняет преобразования координат (модельное, вид, проекция)
 * 3. Передаёт данные следующему этапу (фрагментному шейдеру)
 *
 * В Vulkan шейдеры:
 * - Компилируются в бинарный формат SPIR-V перед запуском приложения
 * - Используют систему location для связи с атрибутами вершин в C++ коде
 * - Не имеют предопределенных атрибутов (как gl_Position в OpenGL)
 *
 * Этот шейдер:
 * - Принимает 2D-позицию и цвет вершины
 * - Преобразует позицию в 4D для системы координат Vulkan
 * - Передаёт неизменённый цвет фрагментному шейдеру
 */

#version 450
layout(location = 0) in vec2 inPosition;  // Позиция вершины (location = 0 соответствует первому атрибуту в C++ коде)
layout(location = 1) in vec3 inColor;     // Цвет вершины (location = 1 соответствует второму атрибуту)
layout(location = 0) out vec3 fragColor;  // Выходные данные для фрагментного шейдера (также используется location)

void main() {
    // gl_Position - встроенная выходная переменная для позиции вершины
    // Преобразуем 2D-координаты в 4D (x, y, z, w), где z=0, w=1
    gl_Position = vec4(inPosition, 0.0, 1.0);
    
    // Передаём цвет фрагментному шейдеру без изменений
    fragColor = inColor;
} 