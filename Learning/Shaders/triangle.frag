/*
 * УЧЕБНЫЙ КОММЕНТАРИЙ: Фрагментный шейдер в Vulkan (GLSL)
 *
 * Фрагментный шейдер (или pixel shader) - это этап конвейера, который
 * определяет цвет каждого фрагмента (потенциального пикселя на экране).
 * Этот шейдер вызывается для каждого фрагмента, созданного в результате
 * растеризации примитивов (треугольников).
 *
 * Основные задачи фрагментного шейдера:
 * 1. Получение интерполированных данных из вершинного шейдера
 * 2. Вычисление итогового цвета фрагмента (текстурирование, освещение и т.д.)
 * 3. Вывод цвета в целевой буфер кадра
 *
 * В этом шейдере:
 * - Входной параметр fragColor получает интерполированный цвет вершин
 * - Выходной параметр outColor устанавливает итоговый цвет фрагмента
 * - Альфа-компонент (прозрачность) устанавливается в 1.0 (непрозрачный)
 */

#version 450
layout(location = 0) in vec3 fragColor;   // Интерполированный цвет из вершинного шейдера
layout(location = 0) out vec4 outColor;   // Выходной цвет фрагмента (RGBA)

void main() {
    // Преобразуем трехкомпонентный цвет (RGB) в четырехкомпонентный (RGBA)
    // Последний компонент (1.0) - альфа-канал (непрозрачность)
    outColor = vec4(fragColor, 1.0);
} 